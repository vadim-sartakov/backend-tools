{"version":3,"sources":["../src/middleware.js"],"names":["commonMiddlewares","bodyParser","urlencoded","extended","json","notFound","debug","req","res","ip","originalUrl","status","send","message","internalError","err","next","stack","security","schema","modifiers","user","locals","permissions","getPermissions","denied","some","modifier","validator","body","constraints","errors","unauthorized"],"mappings":"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","file":"middleware.js","sourcesContent":["import helmet from \"helmet\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport bodyParser from \"body-parser\";\r\nimport createDebug from \"debug\";\r\nimport { asyncMiddleware } from \"./utils\";\r\nimport { validate, getPermissions } from \"common-tools\";\r\n\r\nexport const commonMiddlewares = [\r\n  helmet(),\r\n  cookieParser(),\r\n  bodyParser.urlencoded({ extended: true }),\r\n  bodyParser.json()\r\n];\r\n\r\nexport const notFound = () => {\r\n  const debug = createDebug(\"middleware:notFound\");\r\n  return (req, res) => {\r\n    debug(\"%s requested non-existed resource %s\", req.ip, req.originalUrl);\r\n    res.status(404).send({ message: \"Not found\" });\r\n  };\r\n};\r\n\r\nexport const internalError = () => {\r\n  const debug = createDebug(\"middleware:internalError\");\r\n  return (err, req, res, next) => { // eslint-disable-line no-unused-vars\r\n    debug(\"%s\\n%s\", err.message, err.stack);\r\n    res.status(500).send({ message: \"Internal server error\" });\r\n  };\r\n};\r\n\r\n/**\r\n * Checks current user stored in \"user.local\" against security schema.\r\n * Resulted filter stored in \"res.locals.permissions\" parameter\r\n * @param {Object} schema\r\n */\r\nexport const security = (schema, ...modifiers) => {\r\n  const debug = createDebug(\"middleware:security\");\r\n  return (req, res, next) => {\r\n    const { user } = res.locals;\r\n    const permissions = getPermissions(\r\n      user,\r\n      schema,\r\n      ...modifiers\r\n    );\r\n    const denied = modifiers.some(modifier => !permissions[modifier]);\r\n    if (denied) {\r\n      res.status(403);\r\n      res.json({ message: \"Access is denied\" });\r\n      debug(\"Access denied for %s to %s\", req.ip, req.originalUrl);\r\n      return;\r\n    }\r\n    res.locals.permissions = permissions;\r\n    next();\r\n  };\r\n};\r\n\r\nexport const validator = constraints => {\r\n  const debug = createDebug(\"middleware:validator\");\r\n  return asyncMiddleware(async (req, res, next) => {\r\n    const errors = await validate(req.body, constraints);\r\n    if (errors) {\r\n      debug(\"Validation failed. Url: %s; payload: %o; errors: %o\", req.originalUrl, req.body, errors);\r\n      res.status(400);\r\n      return res.json({ message: \"Validation failed\", errors });\r\n    }\r\n    next();\r\n  })\r\n};\r\n\r\nexport const unauthorized = () => {\r\n  const debug = createDebug(\"middleware:unauthorized\");\r\n  return (req, res, next) => {\r\n    if (res.locals.user) return next();\r\n    debug(\"Unauthorized access from %s to %s\", req.ip, req.originalUrl);\r\n    res.status(401);\r\n    res.json({ message: \"Unathorized\" });\r\n  };\r\n};"]}