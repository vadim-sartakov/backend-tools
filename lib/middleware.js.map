{"version":3,"sources":["../src/middleware.js"],"names":["commonMiddlewares","bodyParser","urlencoded","extended","json","notFound","req","res","logger","warn","ip","originalUrl","status","send","message","internalError","err","next","error","stack","permissions","user","locals","schema","method","create","read","filter","update","delete","validator","constraints","opts","errors","body"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEO,IAAMA,gDAAoB,CAC7B,uBAD6B,EAE7B,6BAF6B,EAG7BC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAH6B,EAI7BF,qBAAWG,IAAX,EAJ6B,CAA1B;;AAOA,IAAMC,8BAAW,SAAXA,QAAW;AAAA,WAAU,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5CC,kBAAUA,OAAOC,IAAP,CAAY,sCAAZ,EAAoDH,IAAII,EAAxD,EAA4DJ,IAAIK,WAAhE,CAAV;AACAJ,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,WAAX,EAArB;AACH,KAHuB;AAAA,CAAjB;;AAKA,IAAMC,wCAAgB,SAAhBA,aAAgB;AAAA,WAAU,UAACC,GAAD,EAAMV,GAAN,EAAWC,GAAX,EAAgBU,IAAhB,EAAyB;AAAE;AAC9DT,kBAAUA,OAAOU,KAAP,CAAa,QAAb,EAAuBF,IAAIF,OAA3B,EAAoCE,IAAIG,KAAxC,CAAV;AACAZ,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAArB;AACH,KAH4B;AAAA,CAAtB;;AAKP;;;;;AAKO,IAAMM,oCAAc,SAAdA,WAAc;AAAA,WAAU,UAACd,GAAD,EAAMC,GAAN,EAAWU,IAAX,EAAoB;AAAA,YAC7CI,IAD6C,GACpCd,IAAIe,MADgC,CAC7CD,IAD6C;;AAErD,YAAMD,cAAc,iCAChBC,IADgB,EAEhBE,MAFgB,EAGhB,QAHgB,EAIhB,MAJgB,EAKhB,QALgB,EAMhB,QANgB,EAOhB,QAPgB,EAQhB,YARgB,EAShB,cATgB,CAApB;AAFqD,YAa7CC,MAb6C,GAalClB,GAbkC,CAa7CkB,MAb6C;;AAcrD,YAAMA,WAAW,MAAX,IAAqB,CAACJ,YAAYK,MAApC,IACMD,WAAW,KAAX,IAAoB,CAACJ,YAAYM,IAAjC,IAAyC,CAACN,YAAYO,MAD5D,IAEMH,WAAW,KAAX,IAAoB,CAACJ,YAAYQ,MAAjC,IAA2C,CAACR,YAAYO,MAF9D,IAGMH,WAAW,QAAX,IAAuB,CAACJ,YAAYS,MAH9C,EAGwD;AACpDtB,gBAAIK,MAAJ,CAAW,GAAX;AACAL,gBAAIH,IAAJ,CAAS,EAAEU,SAAS,kBAAX,EAAT;AACA;AACH;AACDP,YAAIe,MAAJ,CAAWF,WAAX,GAAyBA,WAAzB;AACAH;AACH,KAxB0B;AAAA,CAApB;;AA0BA,IAAMa,gCAAY,SAAZA,SAAY,CAACC,WAAD,EAAcC,IAAd;AAAA,WAAuB,UAAC1B,GAAD,EAAMC,GAAN,EAAWU,IAAX,EAAoB;AAChE,YAAMgB,SAAS,wBAAS3B,IAAI4B,IAAb,EAAmBH,WAAnB,EAAgCC,IAAhC,CAAf;AACA,YAAIC,MAAJ,EAAY;AACR1B,gBAAIK,MAAJ,CAAW,GAAX;AACA,mBAAOL,IAAIH,IAAJ,CAAS,EAAEU,SAAS,mBAAX,EAAgCmB,cAAhC,EAAT,CAAP;AACH;AACDhB;AACH,KAPwB;AAAA,CAAlB","file":"middleware.js","sourcesContent":["import helmet from 'helmet';\r\nimport cookieParser from 'cookie-parser';\r\nimport bodyParser from 'body-parser';\r\nimport validate from \"validate.js\";\r\nimport { getPermissions } from \"shared-tools\";\r\n\r\nexport const commonMiddlewares = [\r\n    helmet(),\r\n    cookieParser(),\r\n    bodyParser.urlencoded({ extended: true }),\r\n    bodyParser.json()\r\n];\r\n\r\nexport const notFound = logger => (req, res) => {\r\n    logger && logger.warn(\"%s requested non-existed resource %s\", req.ip, req.originalUrl);\r\n    res.status(404).send({ message: \"Not found\" });\r\n};\r\n\r\nexport const internalError = logger => (err, req, res, next) => { // eslint-disable-line no-unused-vars\r\n    logger && logger.error(\"%s\\n%s\", err.message, err.stack);\r\n    res.status(500).send({ message: \"Internal server error\" });\r\n};\r\n\r\n/**\r\n * Checks current user sotred in \"user.local\" against security schema.\r\n * Resulted filter stored in \"res.locals.permissions\" parameter\r\n * @param {Object} schema\r\n */\r\nexport const permissions = schema => (req, res, next) => {\r\n    const { user } = res.locals;\r\n    const permissions = getPermissions(\r\n        user,\r\n        schema,\r\n        \"create\",\r\n        \"read\",\r\n        \"update\",\r\n        \"delete\",\r\n        \"filter\",\r\n        \"readFields\",\r\n        \"modifyFields\"\r\n    );\r\n    const { method } = req;\r\n    if (( method === \"POST\" && !permissions.create ) ||\r\n            ( method === \"GET\" && !permissions.read && !permissions.filter ) ||\r\n            ( method === \"PUT\" && !permissions.update && !permissions.filter ) ||\r\n            ( method === \"DELETE\" && !permissions.delete )) {\r\n        res.status(403);\r\n        res.json({ message: \"Access is denied\" });\r\n        return;\r\n    }\r\n    res.locals.permissions = permissions;\r\n    next();\r\n};\r\n\r\nexport const validator = (constraints, opts) => (req, res, next) => {\r\n    const errors = validate(req.body, constraints, opts);\r\n    if (errors) {\r\n        res.status(400);\r\n        return res.json({ message: \"Validation failed\", errors });\r\n    }\r\n    next();\r\n};"]}