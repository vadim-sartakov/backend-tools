{"version":3,"sources":["../src/middleware.js"],"names":["common","bodyParser","urlencoded","extended","json","notFound","req","res","logger","warn","ip","originalUrl","status","send","message","internalError","err","next","error","stack","securityFilter","securitySchema","accessModifiers","user","locals","security","getPermissions"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEO,IAAMA,0BAAS,CAClB,uBADkB,EAElB,6BAFkB,EAGlBC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAHkB,EAIlBF,qBAAWG,IAAX,EAJkB,CAAf;;AAOA,IAAMC,8BAAW,SAAXA,QAAW;AAAA,WAAU,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5CC,kBAAUA,OAAOC,IAAP,CAAY,sCAAZ,EAAoDH,IAAII,EAAxD,EAA4DJ,IAAIK,WAAhE,CAAV;AACAJ,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,WAAX,EAArB;AACH,KAHuB;AAAA,CAAjB;;AAKA,IAAMC,wCAAgB,SAAhBA,aAAgB;AAAA,WAAU,UAACC,GAAD,EAAMV,GAAN,EAAWC,GAAX,EAAgBU,IAAhB,EAAyB;AAAE;AAC9DT,kBAAUA,OAAOU,KAAP,CAAa,QAAb,EAAuBF,IAAIF,OAA3B,EAAoCE,IAAIG,KAAxC,CAAV;AACAZ,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAArB;AACH,KAH4B;AAAA,CAAtB;;AAKP;;;;;AAKO,IAAMM,0CAAiB,SAAjBA,cAAiB,CAACC,cAAD;AAAA,sCAAoBC,eAApB;AAAoBA,uBAApB;AAAA;;AAAA,WAAwC,UAAChB,GAAD,EAAMC,GAAN,EAAWU,IAAX,EAAoB;AAAA,YAC9EM,IAD8E,GACrEhB,IAAIiB,MADiE,CAC9ED,IAD8E;;AAEtF,YAAME,WAAWC,8CAAeH,IAAf,EAAqBF,cAArB,SAAwCC,eAAxC,EAAjB;AACAf,YAAIiB,MAAJ,CAAWC,QAAX,GAAsBA,QAAtB;AACAR;AACH,KAL6B;AAAA,CAAvB","file":"middleware.js","sourcesContent":["import helmet from 'helmet';\r\nimport cookieParser from 'cookie-parser';\r\nimport bodyParser from 'body-parser';\r\nimport { getPermissions } from \"shared-tools\";\r\n\r\nexport const common = [\r\n    helmet(),\r\n    cookieParser(),\r\n    bodyParser.urlencoded({ extended: true }),\r\n    bodyParser.json()\r\n];\r\n\r\nexport const notFound = logger => (req, res) => {\r\n    logger && logger.warn(\"%s requested non-existed resource %s\", req.ip, req.originalUrl);\r\n    res.status(404).send({ message: \"Not found\" });\r\n};\r\n\r\nexport const internalError = logger => (err, req, res, next) => { // eslint-disable-line no-unused-vars\r\n    logger && logger.error(\"%s\\n%s\", err.message, err.stack);\r\n    res.status(500).send({ message: \"Internal server error\" });\r\n};\r\n\r\n/**\r\n * Checks current user sotred in \"user.local\" against security schema.\r\n * Resulted filter stored in \"res.locals.security\" parameter\r\n * @param {Object} securitySchema\r\n */\r\nexport const securityFilter = (securitySchema, ...accessModifiers) => (req, res, next) => {\r\n    const { user } = res.locals;\r\n    const security = getPermissions(user, securitySchema, ...accessModifiers);\r\n    res.locals.security = security;\r\n    next();\r\n};"]}