{"version":3,"sources":["../../src/model/CrudModel.js"],"names":["defaultPermissions","create","read","update","delete","CrudModel","excerptProjection","searchFields","loadFields","cascadeFields","permissions","page","size","filter","sort","permissionFilter","permissionProjection","projection","getReadProjection","resultFilter","getResultFilter","execGetAll","queryFilter","search","Array","isArray","Object","assign","$or","searchFieldsToFilter","filterArray","push","length","$and","execCount","payload","execAddOne","underscoredId","addIdUnderscore","execGetOne","result","id","_id","initialObject","execUpdateOne","execDeleteOne"],"mappings":"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","file":"CrudModel.js","sourcesContent":["import { filterObject, createProjection } from \"common-tools\";\r\n\r\nconst defaultPermissions = { create: { }, read: { }, update: { }, delete: { } };\r\n\r\nclass CrudModel {\r\n\r\n  constructor({ excerptProjection, searchFields, loadFields, cascadeFields }) {\r\n    this.excerptProjection = excerptProjection;\r\n    this.searchFields = searchFields;\r\n    this.loadFields = loadFields;\r\n    this.cascadeFields = cascadeFields;\r\n  }\r\n\r\n  async getAll({ page = 0, size = 20, filter, sort }, permissions) {\r\n    permissions = { ...defaultPermissions, ...permissions };\r\n    const { read: { filter: permissionFilter, projection: permissionProjection } } = permissions;\r\n    let projection = this.getReadProjection(permissionProjection);\r\n    if (projection) projection = createProjection(projection);\r\n    const resultFilter = this.getResultFilter(filter, permissionFilter);\r\n    return await this.execGetAll({\r\n      page,\r\n      size,\r\n      projection,\r\n      filter: resultFilter,\r\n      sort\r\n    });\r\n  }\r\n\r\n  getResultFilter(queryFilter, permissionFilter) {\r\n\r\n    if (queryFilter && queryFilter.search && this.searchFields) {\r\n      const search = Array.isArray(this.searchFields) ? this.searchFields : [this.searchFields];\r\n      Object.assign(queryFilter, { $or: [...this.searchFieldsToFilter(search, queryFilter.search)] });\r\n      delete queryFilter.search;\r\n    }\r\n    const filterArray = [];\r\n    if (permissionFilter) filterArray.push(permissionFilter);\r\n    if (queryFilter) filterArray.push(queryFilter);\r\n    let resultFilter;\r\n    switch (filterArray.length) {\r\n      case 1:\r\n        resultFilter = filterArray[0];\r\n        break;\r\n      case 2:\r\n        resultFilter = { $and: filterArray };\r\n        break;\r\n      default:\r\n    }\r\n    return resultFilter;\r\n  }\r\n\r\n  getReadProjection(permissionProjection) {\r\n    return this.excerptProjection || permissionProjection;\r\n  }\r\n\r\n  async count(filter, permissions) {\r\n      permissions = { ...defaultPermissions, ...permissions };\r\n      const { read: { filter: permissionFilter } } = permissions;\r\n      const resultFilter = this.getResultFilter(filter, permissionFilter);\r\n      return await this.execCount(resultFilter);\r\n  }\r\n\r\n  async addOne(payload, permissions) {\r\n      permissions = { ...defaultPermissions, ...permissions };\r\n      const { update: { projection } } = permissions;\r\n      if (projection) payload = filterObject(payload, projection);\r\n      return this.execAddOne(payload);\r\n  }\r\n\r\n  async getOne(filter, permissions) {\r\n      if (this.underscoredId) filter = this.addIdUnderscore(filter);\r\n      permissions = { ...defaultPermissions, ...permissions };\r\n      const { read: { filter: permissionFilter, projection: permissionProjection } } = permissions;\r\n      let projection = this.getReadProjection(permissionProjection);\r\n      if (projection) projection = createProjection(projection);\r\n      const resultFilter = this.getResultFilter(filter, permissionFilter);\r\n      return await this.execGetOne({ filter: resultFilter, projection });\r\n  }\r\n\r\n  addIdUnderscore(filter) {\r\n      let result;\r\n      if (filter && filter.id) {\r\n          result = { ...filter };\r\n          result._id = result.id;\r\n          delete result.id;\r\n      }\r\n      return result;\r\n  }\r\n\r\n  async updateOne(filter, payload, permissions) {\r\n      if (this.underscoredId) filter = this.addIdUnderscore(filter);\r\n      permissions = { ...defaultPermissions, ...permissions };\r\n      const { read: { filter: permissionFilter }, update: { projection } } = permissions;\r\n      if (projection) {\r\n          const initialObject = await this.execGetOne(filter);\r\n          payload = filterObject(payload, projection, initialObject);\r\n      }\r\n      const resultFilter = this.getResultFilter(filter, permissionFilter);\r\n      return await this.execUpdateOne(resultFilter, payload);\r\n  }\r\n\r\n  async deleteOne(filter, permissions) {\r\n      if (this.underscoredId) filter = this.addIdUnderscore(filter);\r\n      permissions = { ...defaultPermissions, ...permissions };\r\n      const { read: { filter: permissionFilter } } = permissions;\r\n      const resultFilter = this.getResultFilter(filter, permissionFilter);\r\n      return await this.execDeleteOne(resultFilter);\r\n  }\r\n\r\n}\r\n\r\nexport default CrudModel;"]}