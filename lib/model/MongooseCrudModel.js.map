{"version":3,"sources":["../../src/model/MongooseCrudModel.js"],"names":["MongooseCrudModel","Model","queryFilter","permissionFilter","masterPermission","filterArray","push","resultFilter","length","$and","page","size","filter","sort","permissions","read","readFields","getAllQuery","find","skip","limit","select","getResultFilter","where","setOptions","lean","exec","countQuery","count","payload","modifyFields","doc","save","saved","toObject","convertFitlerId","query","findOne","result","id","_id","update","initialObject","findOneAndUpdate","new","updated","permissionDelete","delete","findOneAndDelete","deleted"],"mappings":"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","file":"MongooseCrudModel.js","sourcesContent":["import { filterObject } from \"shared-tools\";\r\n\r\nclass MongooseCrudModel {\r\n\r\n    constructor(Model) {\r\n        this.Model = Model;\r\n    }\r\n\r\n    getResultFilter(queryFilter, permissionFilter, masterPermission) {\r\n        const filterArray = [];\r\n        if (permissionFilter && !masterPermission) filterArray.push(permissionFilter);\r\n        if (queryFilter) filterArray.push(queryFilter);\r\n        let resultFilter;\r\n        switch(filterArray.length) {\r\n            case 1:\r\n                resultFilter = filterArray[0];\r\n                break;\r\n            case 2:\r\n                resultFilter = { $and: filterArray };\r\n                break;\r\n            default:\r\n        }\r\n        return resultFilter;\r\n    }\r\n\r\n    async getAll({ page, size, filter, sort }, permissions = { }) {\r\n        const { filter: permissionFilter, read, readFields } = permissions;\r\n        const getAllQuery = this.Model.find()\r\n            .skip(page * size)\r\n            .limit(size);\r\n        if (readFields) getAllQuery.select(readFields);\r\n        const resultFilter = this.getResultFilter(filter, permissionFilter, read);\r\n        if (resultFilter) getAllQuery.where(resultFilter);\r\n        if (sort) getAllQuery.sort(sort);\r\n        getAllQuery.setOptions({ lean: true });\r\n        return await getAllQuery.exec();\r\n    }\r\n\r\n    async count(filter, permissions = { }) {\r\n        const { filter: permissionFilter, read } = permissions;\r\n        const countQuery = this.Model.count();\r\n        const resultFilter = this.getResultFilter(filter, permissionFilter, read);\r\n        if (resultFilter) countQuery.where(resultFilter);\r\n        return await countQuery.exec();\r\n    }\r\n\r\n    async addOne(payload, permissions = { }) {\r\n        const { readFields, modifyFields } = permissions;\r\n        if (modifyFields) payload = filterObject(payload, modifyFields);\r\n        const doc = new this.Model(payload);\r\n        let saved = await doc.save();\r\n        saved = saved.toObject();\r\n        if (readFields) saved = filterObject(saved, readFields);\r\n        return saved;\r\n    }\r\n\r\n    async getOne(filter, permissions = { }) {\r\n        filter = this.convertFitlerId(filter);\r\n        const { filter: permissionFilter, readFields, read } = permissions;\r\n        const resultFilter = this.getResultFilter(filter, permissionFilter, read);\r\n        const query = this.Model.findOne(resultFilter);\r\n        if (readFields) query.select(readFields);\r\n        query.setOptions({ lean: true });\r\n        return await query.exec();\r\n    }\r\n\r\n    convertFitlerId(filter) {\r\n        let result;\r\n        if (filter && filter.id) {\r\n            result = { ...filter };\r\n            result._id = result.id;\r\n            delete result.id;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    async updateOne(filter, payload, permissions = { }) {\r\n        filter = this.convertFitlerId(filter);\r\n        const { filter: permissionFilter, readFields, modifyFields, update } = permissions;\r\n        const resultFilter = this.getResultFilter(filter, permissionFilter, update);\r\n        const initialObject = modifyFields && await this.Model.findOne(resultFilter).lean();\r\n        payload = ( modifyFields && filterObject(payload, modifyFields, initialObject) ) || payload;\r\n        let updated = await this.Model.findOneAndUpdate(resultFilter, payload, { new: true, lean: true });\r\n        if (readFields) updated = filterObject(updated, readFields);\r\n        return updated;\r\n    }\r\n\r\n    async deleteOne(filter, permissions = { }) {\r\n        filter = this.convertFitlerId(filter);\r\n        const { filter: permissionFilter, readFields, delete: permissionDelete } = permissions;\r\n        const resultFilter = this.getResultFilter(filter, permissionFilter, permissionDelete);\r\n        let deleted = await this.Model.findOneAndDelete(resultFilter).lean();\r\n        if (readFields) deleted = filterObject(deleted, readFields);\r\n        return deleted;\r\n    }\r\n\r\n}\r\n\r\nexport default MongooseCrudModel;"]}