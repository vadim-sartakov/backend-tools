{"version":3,"sources":["../../src/model/MongooseCrudModel.js"],"names":["MongooseCrudModel","Model","opts","populate","search","query","map","searchField","RegExp","page","size","projection","filter","sort","getAllQuery","find","skip","limit","select","where","applyPopulateIfRequired","setOptions","lean","exec","Object","keys","forEach","path","countQuery","count","payload","doc","save","saved","toObject","findOne","findOneAndUpdate","new","findOneAndDelete","CrudModel"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;IAEMA,iB;;;AAEF,+BAAYC,KAAZ,EAA8B;AAAA,YAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAAA,0IACpBA,IADoB;;AAAA,YAElBC,QAFkB,GAELD,IAFK,CAElBC,QAFkB;;AAG1B,cAAKF,KAAL,GAAaA,KAAb;AACA,cAAKE,QAAL,GAAgBA,QAAhB;AAJ0B;AAK7B;;;;6CAEoBC,M,EAAQC,K,EAAO;AAChC,mBAAOD,OAAOE,GAAP,CAAW,uBAAe;AAC7B,2CAAUC,WAAV,EAAwB,IAAIC,MAAJ,QAAgBH,KAAhB,SAA2B,GAA3B,CAAxB;AACH,aAFM,CAAP;AAGH;;;;;oBAEkBI,I,SAAAA,I;oBAAMC,I,SAAAA,I;oBAAMC,U,SAAAA,U;oBAAYC,M,SAAAA,M;oBAAQC,I,SAAAA,I;;;;;;AACzCC,2C,GAAc,KAAKb,KAAL,CAAWc,IAAX,GACfC,IADe,CACVP,OAAOC,IADG,EAEfO,KAFe,CAETP,IAFS,C;;AAGpB,oCAAIC,UAAJ,EAAgBG,YAAYI,MAAZ,CAAmBP,UAAnB;AAChB,oCAAIC,MAAJ,EAAYE,YAAYK,KAAZ,CAAkBP,MAAlB;AACZ,oCAAIC,IAAJ,EAAUC,YAAYD,IAAZ,CAAiBA,IAAjB;AACV,qCAAKO,uBAAL,CAA6BN,WAA7B;AACAA,4CAAYO,UAAZ,CAAuB,EAAEC,MAAM,IAAR,EAAvB;;uCACaR,YAAYS,IAAZ,E;;;;;;;;;;;;;;;;;;;;;gDAGOlB,K,EAAO;AAAA;;AAC3B,gBAAI,KAAKF,QAAT,EAAmBqB,OAAOC,IAAP,CAAY,KAAKtB,QAAjB,EAA2BuB,OAA3B,CAAmC;AAAA,uBAAQrB,MAAMF,QAAN,CAAe,EAAEwB,UAAF,EAAQT,QAAQ,OAAKf,QAAL,CAAcwB,IAAd,CAAhB,EAAf,CAAR;AAAA,aAAnC;AACtB;;;;kGAEef,M;;;;;;AACNgB,0C,GAAa,KAAK3B,KAAL,CAAW4B,KAAX,E;;AACnB,oCAAIjB,MAAJ,EAAYgB,WAAWT,KAAX,CAAiBP,MAAjB;;uCACCgB,WAAWL,IAAX,E;;;;;;;;;;;;;;;;;;;;;;kGAGAO,O;;;;;;AACPC,mC,GAAM,IAAI,KAAK9B,KAAT,CAAe6B,OAAf,C;;uCACMC,IAAIC,IAAJ,E;;;AAAdC,qC;kEACGA,MAAMC,QAAN,E;;;;;;;;;;;;;;;;;;;;oBAGQtB,M,SAAAA,M;oBAAQD,U,SAAAA,U;;;;;;AACjBN,qC,GAAQ,KAAKJ,KAAL,CAAWkC,OAAX,CAAmBvB,MAAnB,C;;AACd,oCAAID,UAAJ,EAAgBN,MAAMa,MAAN,CAAaP,UAAb;AAChB,qCAAKS,uBAAL,CAA6Bf,KAA7B;AACAA,sCAAMgB,UAAN,CAAiB,EAAEC,MAAM,IAAR,EAAjB;;uCACajB,MAAMkB,IAAN,E;;;;;;;;;;;;;;;;;;;;;;kGAGGX,M,EAAQkB,O;;;;;;uCACX,KAAK7B,KAAL,CAAWmC,gBAAX,CAA4BxB,MAA5B,EAAoCkB,OAApC,EAA6C,EAAEO,KAAK,IAAP,EAAaf,MAAM,IAAnB,EAA7C,C;;;;;;;;;;;;;;;;;;;;;;kGAGGV,M;;;;;;uCACH,KAAKX,KAAL,CAAWqC,gBAAX,CAA4B1B,MAA5B,EAAoCU,IAApC,E;;;;;;;;;;;;;;;;;;;;;;EAxDWiB,mB;;kBA6DjBvC,iB","file":"MongooseCrudModel.js","sourcesContent":["import CrudModel from \"./CrudModel\";\r\n\r\nclass MongooseCrudModel extends CrudModel {\r\n\r\n    constructor(Model, opts = {}) {\r\n        super(opts);\r\n        const { populate } = opts;\r\n        this.Model = Model;\r\n        this.populate = populate;\r\n    }\r\n\r\n    searchFieldsToFilter(search, query) {\r\n        return search.map(searchField => {\r\n            return { [searchField]: new RegExp(`.*${query}.*`, 'i') };\r\n        });\r\n    }\r\n\r\n    async execGetAll({ page, size, projection, filter, sort }) {\r\n        const getAllQuery = this.Model.find()\r\n            .skip(page * size)\r\n            .limit(size);\r\n        if (projection) getAllQuery.select(projection);\r\n        if (filter) getAllQuery.where(filter);\r\n        if (sort) getAllQuery.sort(sort);\r\n        this.applyPopulateIfRequired(getAllQuery);\r\n        getAllQuery.setOptions({ lean: true });\r\n        return await getAllQuery.exec();\r\n    }\r\n\r\n    applyPopulateIfRequired(query) {\r\n        if (this.populate) Object.keys(this.populate).forEach(path => query.populate({ path, select: this.populate[path] }));\r\n    }\r\n\r\n    async execCount(filter) {\r\n        const countQuery = this.Model.count();\r\n        if (filter) countQuery.where(filter);\r\n        return await countQuery.exec();\r\n    }\r\n\r\n    async execAddOne(payload) {\r\n        const doc = new this.Model(payload);\r\n        let saved = await doc.save();\r\n        return saved.toObject();\r\n    }\r\n\r\n    async execGetOne({ filter, projection }) {\r\n        const query = this.Model.findOne(filter);\r\n        if (projection) query.select(projection);\r\n        this.applyPopulateIfRequired(query);\r\n        query.setOptions({ lean: true });\r\n        return await query.exec();\r\n    }\r\n\r\n    async execUpdateOne(filter, payload) {\r\n        return await this.Model.findOneAndUpdate(filter, payload, { new: true, lean: true });;\r\n    }\r\n\r\n    async execDeleteOne(filter) {\r\n        return await this.Model.findOneAndDelete(filter).lean();\r\n    }\r\n\r\n}\r\n\r\nexport default MongooseCrudModel;"]}