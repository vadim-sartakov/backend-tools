{"version":3,"sources":["../../src/model/MongooseCrudModel.js"],"names":["MongooseCrudModel","Model","opts","populate","underscoredId","search","query","map","searchField","RegExp","exclusive","paths","join","page","size","projection","filter","sort","getAllQuery","find","skip","limit","select","convertToMongooseProjection","where","applyPopulateIfRequired","setOptions","lean","exec","Object","keys","forEach","path","countQuery","count","payload","doc","save","saved","toObject","findOne","findOneAndUpdate","new","findOneAndDelete","CrudModel"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;IAEMA,iB;;;AAEJ,6BAAYC,KAAZ,EAA8B;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAAA,sIACtBA,IADsB;;AAAA,QAEpBC,QAFoB,GAEPD,IAFO,CAEpBC,QAFoB;;AAG5B,UAAKF,KAAL,GAAaA,KAAb;AACA,UAAKE,QAAL,GAAgBA,QAAhB;AACA,UAAKC,aAAL,GAAqB,IAArB;AAL4B;AAM7B;;;;yCAEoBC,M,EAAQC,K,EAAO;AAClC,aAAOD,OAAOE,GAAP,CAAW,uBAAe;AAC/B,mCAAUC,WAAV,EAAwB,IAAIC,MAAJ,QAAgBH,KAAhB,SAA2B,GAA3B,CAAxB;AACD,OAFM,CAAP;AAGD;;;uDAEiD;AAAA,UAApBI,SAAoB,SAApBA,SAAoB;AAAA,UAATC,KAAS,SAATA,KAAS;;AAChD,aAAO,CAAED,YAAY,GAAZ,GAAkB,EAApB,IAA2BC,MAAMC,IAAN,CAAWF,YAAY,IAAZ,GAAmB,GAA9B,CAAlC;AACD;;;;;YAEkBG,I,SAAAA,I;YAAMC,I,SAAAA,I;YAAMC,U,SAAAA,U;YAAYC,M,SAAAA,M;YAAQC,I,SAAAA,I;;;;;;AAC3CC,2B,GAAc,KAAKjB,KAAL,CAAWkB,IAAX,GACjBC,IADiB,CACZP,OAAOC,IADK,EAEjBO,KAFiB,CAEXP,IAFW,C;;AAGpB,oBAAIC,UAAJ,EAAgBG,YAAYI,MAAZ,CAAmB,KAAKC,2BAAL,CAAiCR,UAAjC,CAAnB;AAChB,oBAAIC,MAAJ,EAAYE,YAAYM,KAAZ,CAAkBR,MAAlB;AACZ,oBAAIC,IAAJ,EAAUC,YAAYD,IAAZ,CAAiBA,IAAjB;AACV,qBAAKQ,uBAAL,CAA6BP,WAA7B;AACAA,4BAAYQ,UAAZ,CAAuB,EAAEC,MAAM,IAAR,EAAvB;;uBACaT,YAAYU,IAAZ,E;;;;;;;;;;;;;;;;;;;;;4CAGStB,K,EAAO;AAAA;;AAC7B,UAAI,KAAKH,QAAT,EAAmB0B,OAAOC,IAAP,CAAY,KAAK3B,QAAjB,EAA2B4B,OAA3B,CAAmC;AAAA,eAAQzB,MAAMH,QAAN,CAAe,EAAE6B,UAAF,EAAQV,QAAQ,OAAKnB,QAAL,CAAc6B,IAAd,CAAhB,EAAf,CAAR;AAAA,OAAnC;AACpB;;;;4FAEehB,M;;;;;;AACRiB,0B,GAAa,KAAKhC,KAAL,CAAWiC,KAAX,E;;AACnB,oBAAIlB,MAAJ,EAAYiB,WAAWT,KAAX,CAAiBR,MAAjB;;uBACCiB,WAAWL,IAAX,E;;;;;;;;;;;;;;;;;;;;;;4FAGEO,O;;;;;;AACTC,mB,GAAM,IAAI,KAAKnC,KAAT,CAAekC,OAAf,C;;uBACMC,IAAIC,IAAJ,E;;;AAAdC,qB;kDACGA,MAAMC,QAAN,E;;;;;;;;;;;;;;;;;;;;YAGUvB,M,SAAAA,M;YAAQD,U,SAAAA,U;;;;;;AACnBT,qB,GAAQ,KAAKL,KAAL,CAAWuC,OAAX,CAAmBxB,MAAnB,C;;AACd,oBAAID,UAAJ,EAAgBT,MAAMgB,MAAN,CAAa,KAAKC,2BAAL,CAAiCR,UAAjC,CAAb;AAChB,qBAAKU,uBAAL,CAA6BnB,KAA7B;AACAA,sBAAMoB,UAAN,CAAiB,EAAEC,MAAM,IAAR,EAAjB;;uBACarB,MAAMsB,IAAN,E;;;;;;;;;;;;;;;;;;;;;;4FAGKZ,M,EAAQmB,O;;;;;;uBACb,KAAKlC,KAAL,CAAWwC,gBAAX,CAA4BzB,MAA5B,EAAoCmB,OAApC,EAA6C,EAAEO,KAAK,IAAP,EAAaf,MAAM,IAAnB,EAA7C,C;;;;;;;;;;;;;;;;;;;;;;6FAGKX,M;;;;;;uBACL,KAAKf,KAAL,CAAW0C,gBAAX,CAA4B3B,MAA5B,EAAoCW,IAApC,E;;;;;;;;;;;;;;;;;;;;;;EA7DeiB,mB;;kBAkEjB5C,iB","file":"MongooseCrudModel.js","sourcesContent":["import CrudModel from \"./CrudModel\";\r\n\r\nclass MongooseCrudModel extends CrudModel {\r\n\r\n  constructor(Model, opts = {}) {\r\n    super(opts);\r\n    const { populate } = opts;\r\n    this.Model = Model;\r\n    this.populate = populate;\r\n    this.underscoredId = true;\r\n  }\r\n\r\n  searchFieldsToFilter(search, query) {\r\n    return search.map(searchField => {\r\n      return { [searchField]: new RegExp(`.*${query}.*`, 'i') };\r\n    });\r\n  }\r\n\r\n  convertToMongooseProjection({ exclusive, paths }) {\r\n    return ( exclusive ? '-' : '' ) + paths.join(exclusive ? ' -' : ' ');\r\n  }\r\n\r\n  async execGetAll({ page, size, projection, filter, sort }) {\r\n    const getAllQuery = this.Model.find()\r\n      .skip(page * size)\r\n      .limit(size);\r\n    if (projection) getAllQuery.select(this.convertToMongooseProjection(projection));\r\n    if (filter) getAllQuery.where(filter);\r\n    if (sort) getAllQuery.sort(sort);\r\n    this.applyPopulateIfRequired(getAllQuery);\r\n    getAllQuery.setOptions({ lean: true });\r\n    return await getAllQuery.exec();\r\n  }\r\n\r\n  applyPopulateIfRequired(query) {\r\n    if (this.populate) Object.keys(this.populate).forEach(path => query.populate({ path, select: this.populate[path] }));\r\n  }\r\n\r\n  async execCount(filter) {\r\n    const countQuery = this.Model.count();\r\n    if (filter) countQuery.where(filter);\r\n    return await countQuery.exec();\r\n  }\r\n\r\n  async execAddOne(payload) {\r\n    const doc = new this.Model(payload);\r\n    let saved = await doc.save();\r\n    return saved.toObject();\r\n  }\r\n\r\n  async execGetOne({ filter, projection }) {\r\n    const query = this.Model.findOne(filter);\r\n    if (projection) query.select(this.convertToMongooseProjection(projection));\r\n    this.applyPopulateIfRequired(query);\r\n    query.setOptions({ lean: true });\r\n    return await query.exec();\r\n  }\r\n\r\n  async execUpdateOne(filter, payload) {\r\n    return await this.Model.findOneAndUpdate(filter, payload, { new: true, lean: true });\r\n  }\r\n\r\n  async execDeleteOne(filter) {\r\n    return await this.Model.findOneAndDelete(filter).lean();\r\n  }\r\n\r\n}\r\n\r\nexport default MongooseCrudModel;"]}