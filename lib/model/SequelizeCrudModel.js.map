{"version":3,"sources":["../../src/model/SequelizeCrudModel.js"],"names":["SequelizeCrudModel","Model","opts","include","search","query","map","paths","searchField","split","field","length","$iLike","page","size","projection","filter","sort","params","limit","offset","attributes","convertProjectionToAttributes","where","order","convertSort","findAll","exclusive","exclude","keys","Object","key","count","payload","create","find","update","returning","affected","result","destroy","CrudModel"],"mappings":"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","file":"SequelizeCrudModel.js","sourcesContent":["import CrudModel from './CrudModel';\r\n\r\nclass SequelizeCrudModel extends CrudModel {\r\n\r\n  constructor(Model, opts = {}) {\r\n    super(opts);\r\n    const { include } = opts;\r\n    this.Model = Model;\r\n    this.include = include;\r\n  }\r\n\r\n  searchFieldsToFilter(search, query) {\r\n    return search.map(searchField => {\r\n      const paths = searchField.split('.');\r\n      const field = paths.length === 1 ? searchField : `$${searchField}$`;\r\n      return { [field]: { $iLike: `%${query}%` } };\r\n    });\r\n  }\r\n\r\n  async execGetAll({ page = 0, size = 20, projection, filter, sort }) {\r\n    const params = { limit: size, offset: size * page };\r\n    if (projection) params.attributes = this.convertProjectionToAttributes(projection);\r\n    if (filter) params.where = filter;\r\n    if (sort) params.order = this.convertSort(sort);\r\n    if (this.include) params.include = this.include;\r\n    return await this.Model.findAll(params);\r\n  }\r\n\r\n  convertProjectionToAttributes({ exclusive, paths }) {\r\n    return exclusive ? { exclude: paths } : paths;\r\n  }\r\n\r\n  convertSort(sort) {\r\n    if (!sort || typeof (sort) !== 'object') return;\r\n    const keys = Object.keys(sort);\r\n    if (keys.length === 0) return;\r\n    return keys.map(key => [key, sort[key] === 1 ? 'ASC' : 'DESC']);\r\n  }\r\n\r\n  async execCount(filter) {\r\n    return await this.Model.count({ where: filter });\r\n  }\r\n\r\n  async execAddOne(payload) {\r\n    return await this.Model.create(payload);\r\n  }\r\n\r\n  async execGetOne({ filter, projection }) {\r\n    return await this.Model.find({\r\n      attributes: this.convertProjectionToAttributes(projection),\r\n      where: filter,\r\n    });\r\n  }\r\n\r\n  async execUpdateOne(filter, payload) {\r\n    const [affected, result] = await this.Model.update(payload, { where: filter, returning: true });\r\n    if (affected === 0) return null;\r\n    return result[0];\r\n  }\r\n\r\n  async execDeleteOne(filter) {\r\n    return await this.Model.destroy({ where: filter, returning: true });\r\n  }\r\n\r\n}\r\n\r\nexport default SequelizeCrudModel;"]}