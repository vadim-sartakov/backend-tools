{"version":3,"sources":["../../src/model/SequelizeCrudModel.js"],"names":["SequelizeCrudModel","Model","opts","include","search","query","map","searchField","$iLike","page","size","projection","filter","sort","params","limit","offset","attributes","convertProjection","where","order","convertSort","findAll","length","paths","split","exclusive","startsWith","exclude","curPath","substring","keys","Object","key","count","payload","create","find","update","returning","affected","result","destroy","CrudModel"],"mappings":"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","file":"SequelizeCrudModel.js","sourcesContent":["import CrudModel from './CrudModel';\r\n\r\nclass SequelizeCrudModel extends CrudModel {\r\n\r\n  constructor(Model, opts = {}) {\r\n    super(opts);\r\n    const { include } = opts;\r\n    this.Model = Model;\r\n    this.include = include;\r\n  }\r\n\r\n  searchFieldsToFilter(search, query) {\r\n      return search.map(searchField => {\r\n          return { [`$${searchField}$`]: { $iLike: `%${query}%` } };\r\n      });\r\n  }\r\n\r\n  async execGetAll({ page = 0, size = 20, projection, filter, sort }) {\r\n      const params = { limit: size, offset: size * page };\r\n      if (projection) params.attributes = this.convertProjection(projection);\r\n      if (filter) params.where = filter;\r\n      if (sort) params.order = this.convertSort(sort);\r\n      if (this.include) params.include = this.include;\r\n      return await this.Model.findAll(params);\r\n  }\r\n\r\n  convertProjection(projection) {\r\n    if (!projection || typeof(projection) !== 'string' || projection.length === 0) return;\r\n    const paths = projection.split(' ');\r\n    if (paths.length === 0) return;\r\n    const exclusive = paths[0].startsWith('-');\r\n    return exclusive ? { exclude: paths.map(curPath => curPath.substring(1)) } : paths;\r\n  }\r\n\r\n  convertSort(sort) {\r\n    if (!sort || typeof(sort) !== 'object') return;\r\n    const keys = Object.keys(sort);\r\n    if (keys.length === 0) return;\r\n    return keys.map(key => [key, sort[key] === 1 ? 'ASC' : 'DESC']);\r\n  }\r\n\r\n  async execCount(filter) {\r\n    return await this.Model.count({ where: filter });\r\n  }\r\n\r\n  async execAddOne(payload) {\r\n    return await this.Model.create(payload);\r\n  }\r\n\r\n  async execGetOne({ filter, projection }) {\r\n    return await this.Model.find({\r\n      attributes: this.convertProjection(projection),\r\n      where: filter,\r\n    });\r\n  }\r\n\r\n  async execUpdateOne(filter, payload) {\r\n    const [affected, result] = await this.Model.update(payload, { where: filter, returning: true });\r\n    if (affected === 0) return null;\r\n    return result[0];\r\n  }\r\n\r\n  async execDeleteOne(filter) {\r\n    return await this.Model.destroy({ where: filter, returning: true });\r\n  }\r\n\r\n}\r\n\r\nexport default SequelizeCrudModel;"]}