{"version":3,"sources":["../../src/model/SequelizeCrudModel.js"],"names":["SequelizeCrudModel","Model","opts","include","loadFieldsToInclude","loadFields","search","query","map","paths","searchField","split","field","length","$iLike","undefined","Object","keys","association","attributes","convertProjectionToAttributes","duplicating","exclusive","exclude","page","size","projection","filter","sort","params","limit","offset","where","order","convertSort","findAll","key","count","payload","sequelize","transaction","options","cascadeFields","create","instance","associations","reduce","accumulator","some","cascadeField","setter","charAt","toUpperCase","substring","value","apply","Promise","resolve","find","update","returning","affected","result","destroy","CrudModel"],"mappings":"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","file":"SequelizeCrudModel.js","sourcesContent":["import { createProjection } from 'common-tools';\r\nimport CrudModel from './CrudModel';\r\n\r\nclass SequelizeCrudModel extends CrudModel {\r\n\r\n  constructor(Model, opts = {}) {\r\n    super(opts);\r\n    this.Model = Model;\r\n    this.include = this.loadFieldsToInclude(this.loadFields);\r\n  }\r\n\r\n  searchFieldsToFilter(search, query) {\r\n    return search.map(searchField => {\r\n      const paths = searchField.split('.');\r\n      const field = paths.length === 1 ? searchField : `$${searchField}$`;\r\n      return { [field]: { $iLike: `%${query}%` } };\r\n    });\r\n  }\r\n\r\n  loadFieldsToInclude(loadFields) {\r\n    if (loadFields === undefined) return undefined;\r\n    return Object.keys(loadFields).map(field => {\r\n      return {\r\n        association: field,\r\n        attributes: this.convertProjectionToAttributes(createProjection(loadFields[field])),\r\n        // Without this option, malformed query produced\r\n        // It throws SequelizeDatabaseError: missing FROM-clause entry for table\r\n        duplicating: false\r\n      };\r\n    });\r\n  }\r\n\r\n  convertProjectionToAttributes({ exclusive, paths }) {\r\n    return exclusive ? { exclude: paths } : paths;\r\n  }\r\n\r\n  async execGetAll({ page = 0, size = 20, projection, filter, sort }) {\r\n    const params = { limit: size, offset: size * page };\r\n    if (projection) params.attributes = this.convertProjectionToAttributes(projection);\r\n    if (filter) params.where = filter;\r\n    if (sort) params.order = this.convertSort(sort);\r\n    if (this.include) params.include = this.include;\r\n    return await this.Model.findAll(params);\r\n  }\r\n\r\n  convertSort(sort) {\r\n    if (!sort || typeof (sort) !== 'object') return;\r\n    const keys = Object.keys(sort);\r\n    if (keys.length === 0) return;\r\n    return keys.map(key => [key, sort[key] === 1 ? 'ASC' : 'DESC']);\r\n  }\r\n\r\n  async execCount(filter) {\r\n    return await this.Model.count({ where: filter });\r\n  }\r\n\r\n  async execAddOne(payload) {\r\n    return await this.Model.sequelize.transaction(async transaction => {\r\n      const options = { transaction };\r\n      if (this.cascadeFields) options.include = this.cascadeFields;\r\n      const instance = await this.Model.create(payload, options);\r\n      await Object.keys(this.Model.associations).reduce(async (accumulator, association) => {\r\n        if (this.cascadeFields && this.cascadeFields.some(cascadeField => cascadeField === association)) return;\r\n        const setter = instance[`set${association.charAt(0).toUpperCase() + association.substring(1)}`];\r\n        const value = payload[association];\r\n        if (value) await setter.apply(instance, [value, { transaction }]);\r\n      }, Promise.resolve());\r\n      return instance;\r\n    });\r\n  }\r\n\r\n  async execGetOne({ filter, projection }) {\r\n    return await this.Model.find({\r\n      attributes: this.convertProjectionToAttributes(projection),\r\n      where: filter,\r\n    });\r\n  }\r\n\r\n  async execUpdateOne(filter, payload) {\r\n    const [affected, result] = await this.Model.update(payload, { where: filter, returning: true });\r\n    if (affected === 0) return null;\r\n    return result[0];\r\n  }\r\n\r\n  async execDeleteOne(filter) {\r\n    return await this.Model.destroy({ where: filter, returning: true });\r\n  }\r\n\r\n}\r\n\r\nexport default SequelizeCrudModel;"]}