{"version":3,"sources":["../../src/plugins/graphFind.js"],"names":["options","graphFind","call","limit","result","length","graphFindOne","checkIsExclusive","keys","Object","projection","shouldIncludePath","path","isExclusive","pathInProjection","some","key","startsWith","reduceSchemaRecursive","schema","reducer","initialValue","context","paths","level","maxDepth","parentArrays","parentRef","collectionName","reduce","accumulator","currentSchemaPath","caster","currentPaths","currentPathsString","join","nextDepth","nextParentArrays","instance","includePath","currentAccValue","ref","targetModel","db","model","targetCollectionName","collection","searchQueryToFilter","searchQuery","searchFields","filters","map","searchField","RegExp","$or","dotToUnderscore","property","replace","getRootGroupProperties","rootGroupProperties","pathsMeta","filter","curPath","split","$first","getJoinAndGroupPipeline","pathsToJoin","includes","undefined","groupedPaths","index","entry","assign","push","groupedByParentArrays","value","sort","a","b","pipeline","item","forEach","array","sourceArray","$unwind","preserveNullAndEmptyArrays","includeArrayIndex","parts","localField","splice","$lookup","from","foreignField","as","slice","reverse","arrayItem","nextArray","underscoredPath","arrayGroupProperty","$push","groupStep","_id","indexes","$group","nextArrayIndexProperty","$sort","$addFields","$project","getResultFilter","searchFilter","resultFilter","$and","treePathsComparator","localeCompare","skip","search","type","newPath","joinAndGroupPipeline","$match","$skip","$limit","find","aggregate","allowDiskUse","exec","graphFindPlugin","static"],"mappings":";;;;;;;;;sEA2PA,iBAA4BA,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBC,UAAUC,IAAV,CAAe,IAAf,eAA0BF,OAA1B,IAAmCG,OAAO,CAA1C,IADvB;;AAAA;AACQC,kBADR;AAAA,6CAESA,OAAOC,MAAP,GAAgB,CAAhB,GAAoBD,OAAO,CAAP,CAApB,GAAgC,IAFzC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeE,Y;;;;;QApCCL,S,GAAAA,S;;;;;;;;AAvNhB,IAAMM,mBAAmB,SAAnBA,gBAAmB,aAAc;AACrC,MAAMC,OAAOC,OAAOD,IAAP,CAAYE,UAAZ,CAAb;AACA,SAAOA,WAAWF,KAAK,CAAL,CAAX,MAAwB,CAA/B;AACD,CAHD;;AAKA,IAAMG,oBAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAOF,UAAP,EAAsB;AAC9C,MAAI,CAACA,UAAL,EAAiB,OAAO,IAAP;AACjB,MAAMF,OAAOC,OAAOD,IAAP,CAAYE,UAAZ,CAAb;AACA,MAAMG,cAAcN,iBAAiBG,UAAjB,CAApB;AACA,MAAMI,mBAAmBN,KAAKO,IAAL,CAAU;AAAA,WAAOF,cAAcG,QAAQJ,IAAtB,GAA+BI,IAAIC,UAAJ,CAAeL,IAAf,KAAwBA,KAAKK,UAAL,CAAgBD,GAAhB,CAA9D;AAAA,GAAV,CAAzB;AACA,SAASH,eAAe,CAACC,gBAAlB,IAA0C,CAACD,WAAD,IAAgBC,gBAA1D,GAA+E,IAA/E,GAAsF,KAA7F;AACD,CAND;;AAQA,SAASI,qBAAT,CAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,YAAhD,EAA4E;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,uBACuBA,OADvB,CAClEC,KADkE;AAAA,MAClEA,KADkE,kCAC1D,EAD0D;AAAA,uBACuBD,OADvB,CACtDE,KADsD;AAAA,MACtDA,KADsD,kCAC9C,CAD8C;AAAA,MAC3CC,QAD2C,GACuBH,OADvB,CAC3CG,QAD2C;AAAA,MACjCf,UADiC,GACuBY,OADvB,CACjCZ,UADiC;AAAA,MACrBgB,YADqB,GACuBJ,OADvB,CACrBI,YADqB;AAAA,MACPC,SADO,GACuBL,OADvB,CACPK,SADO;AAAA,MACIC,cADJ,GACuBN,OADvB,CACIM,cADJ;;AAE1E,SAAOnB,OAAOD,IAAP,CAAYW,OAAOI,KAAnB,EAA0BM,MAA1B,CAAiC,UAACC,WAAD,EAAclB,IAAd,EAAuB;AAC7D,QAAMmB,oBAAoBZ,OAAOI,KAAP,CAAaX,IAAb,CAA1B;AACA,QAAMZ,UAAY+B,kBAAkBC,MAAlB,IAA4BD,kBAAkBC,MAAlB,CAAyBhC,OAAvD,IAAoE+B,kBAAkB/B,OAAtG;AACA,QAAMiC,4CAAmBV,KAAnB,IAA0BX,IAA1B,EAAN;AACA,QAAMsB,qBAAqBD,aAAaE,IAAb,CAAkB,GAAlB,CAA3B;AACA,QAAMC,YAAYX,aAAa,IAAb,GAAoBA,QAApB,GAA+BA,WAAW,CAA5D;AACA,QAAMY,mBAAmBN,kBAAkBO,QAAlB,KAA+B,OAA/B,gCAA8CZ,gBAAgB,EAA9D,IAAmEQ,kBAAnE,KAAyFR,YAAlH;AACA,QAAMa,cAAc5B,kBAAkBuB,kBAAlB,EAAsCxB,UAAtC,CAApB;;AAEA,QAAI8B,kBAAmBD,eAAenB,QAClCU,WADkC,EAElCI,kBAFkC,EAGlCH,iBAHkC,EAIlC/B,OAJkC,EAKlC,EAAEwB,YAAF,EAASE,0BAAT,EAAuBC,oBAAvB,EAAkCC,8BAAlC,EALkC,CAAhB,IAMfE,WANP;AAOA,QAAI9B,QAAQyC,GAAR,KAAiBL,cAAc,IAAd,IAAsBA,aAAa,CAApD,KAA2DG,WAA/D,EAA4E;AAC1E,UAAMG,cAAc,MAAKC,EAAL,CAAQC,KAAR,CAAc5C,QAAQyC,GAAtB,CAApB;AACA,UAAMI,uBAAuBH,YAAYI,UAAZ,CAAuBlB,cAApD;AACAY,wBAAkBtB,sBAAsBhB,IAAtB,CAChB,KADgB,EAEhBwC,YAAYvB,MAFI,EAGhBC,OAHgB,EAIhBoB,eAJgB,EAKhB;AACEjB,eAAOU,YADT;AAEET,eAAOA,QAAQ,CAFjB;AAGEC,kBAAUW,SAHZ;AAIE1B,8BAJF;AAKEgB,sBAAcW,gBALhB;AAMEV,mBAAWO,kBANb;AAOEN,wBAAgBiB;AAPlB,OALgB,CAAlB;AAeD,KAlBD,MAkBO,IAAId,kBAAkBZ,MAAlB,IAA4BoB,WAAhC,EAA6C;AAClDC,wBAAkBtB,sBAAsBhB,IAAtB,CAChB,KADgB,EAEhB6B,kBAAkBZ,MAFF,EAGhBC,OAHgB,EAIhBoB,eAJgB,EAKhB;AACEjB,eAAOU,YADT;AAEET,oBAFF;AAGEC,0BAHF;AAIEf,8BAJF;AAKEgB,sBAAcW;AALhB,OALgB,CAAlB;AAaD;AACD,WAAOG,eAAP;AACD,GAlDM,EAkDJnB,YAlDI,CAAP;AAmDD;;AAED,IAAM0B,sBAAsB,SAAtBA,mBAAsB,CAAC5B,MAAD,EAAS6B,WAAT,EAAyB;AAAA,MAC3CC,YAD2C,GAC1B9B,OAAOnB,OADmB,CAC3CiD,YAD2C;;AAEnD,MAAI,CAACD,WAAD,IAAgB,CAACC,YAArB,EAAmC;AACnC,MAAMC,UAAUD,aAAaE,GAAb,CAAiB,uBAAe;AAC9C,+BAAUC,WAAV,EAAwB,IAAIC,MAAJ,QAAgBL,WAAhB,SAAiC,GAAjC,CAAxB;AACD,GAFe,CAAhB;AAGA,SAAO,EAAEM,KAAKJ,OAAP,EAAP;AACD,CAPD;;AASA,IAAMK,kBAAkB,SAAlBA,eAAkB;AAAA,SAAYC,SAASC,OAAT,CAAiB,MAAjB,EAAyB,GAAzB,CAAZ;AAAA,CAAxB;;AAEA,IAAMC,yBAAyB,SAAzBA,sBAAyB,YAAa;AAC1C,MAAIC,sBAAsBC,UAAUC,MAAV,CAAiB,gBAAQ;AACjD,WAAOjD,KAAKY,KAAL,KAAe,CAAf,IAAoBZ,KAAK4C,QAAL,KAAkB,KAA7C;AACD,GAFyB,CAA1B;AAGAG,wBAAsBA,oBAAoB9B,MAApB,CAA2B,UAACC,WAAD,EAAclB,IAAd,EAAuB;AACtE;AACA,QAAMkD,UAAUlD,KAAK4C,QAAL,CAAcO,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAhB;AACA,WAAOjC,YAAYgC,OAAZ,IACHhC,WADG,gBAEEA,WAFF,sBAEgBgC,OAFhB,EAE0B,EAAEE,QAAQ,MAAMF,OAAhB,EAF1B,EAAP;AAGD,GANqB,EAMnB,EANmB,CAAtB;AAOA,SAAOH,mBAAP;AACD,CAZD;;AAcA,IAAMM,0BAA0B,SAA1BA,uBAA0B,YAAa;AAC3C,MAAMC,cAAcN,UAAUC,MAAV,CAAiB;AAAA,WAAQjD,KAAK4C,QAAL,CAAcW,QAAd,CAAuB,KAAvB,KAAmCvD,KAAKe,SAAL,KAAmByC,SAA9D;AAAA,GAAjB,CAApB;AACA,MAAI,CAACF,YAAY7D,MAAjB,EAAyB,OAAO,EAAP;;AAEzB,MAAMsD,sBAAsBD,uBAAuBE,SAAvB,CAA5B;;AAEA;AACA;AACA,MAAMS,eAAeH,YAAYrC,MAAZ,CAAmB,UAACC,WAAD,EAAclB,IAAd,EAAoB0D,KAApB,EAA8B;AACpE,QAAMtD,MAAQJ,KAAKc,YAAL,IAAqBd,KAAKc,YAAL,CAAkBS,IAAlB,CAAuB,GAAvB,CAAvB,IAAwD,MAApE;AACA,QAAMoC,QAAUzC,YAAYd,GAAZ,KAAoBP,OAAO+D,MAAP,CAAc,EAAd,EAAkB1C,YAAYd,GAAZ,CAAlB,CAAtB,IAA+D,EAAEU,cAAcd,KAAKc,YAArB,EAAmCH,OAAO,EAA1C,EAA8C+C,YAA9C,EAA7E;AACAC,UAAMhD,KAAN,CAAYkD,IAAZ,CAAiB7D,IAAjB;AACA,wBAAYkB,WAAZ,sBAA0Bd,GAA1B,EAAgCuD,KAAhC;AACD,GALoB,EAKlB,EALkB,CAArB;AAMA,MAAMG,wBAAwBjE,OAAOD,IAAP,CAAY6D,YAAZ,EAA0BxC,MAA1B,CAAiC,UAACC,WAAD,EAAcd,GAAd,EAAsB;AACnF,QAAM2D,QAAQN,aAAarD,GAAb,CAAd;AACA,wCAAWc,WAAX,IAAwB6C,KAAxB;AACD,GAH6B,EAG3B,EAH2B,EAGvBC,IAHuB,CAGlB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,EAAEP,KAAF,GAAUQ,EAAER,KAAZ,GAAoB,CAApB,GAAwBO,EAAEP,KAAF,GAAUQ,EAAER,KAAZ,GAAoB,CAAE,CAAtB,GAA0B,CAA5D;AAAA,GAHkB,CAA9B;;AAKA,MAAMS,WAAWL,sBAAsB7C,MAAtB,CAA6B,UAACC,WAAD,EAAckD,IAAd,EAAuB;AACnE,QAAM5E,sCAAa0B,WAAb,EAAN;AACAkD,SAAKtD,YAAL,IAAqBsD,KAAKtD,YAAL,CAAkBuD,OAAlB,CAA0B,UAACC,KAAD,EAAQZ,KAAR,EAAea,WAAf,EAA+B;AAC5E,UAAMrB,UAAU,MAAMoB,KAAtB;AACA,UAAME,UAAU;AACZxE,cAAMkD,OADM;AAEZuB,oCAA4B;AAFhB,OAAhB;AAIA;AACA;AACA,UAAIF,YAAY9E,MAAZ,GAAqB,CAAzB,EAA4B+E,QAAQE,iBAAR,GAA4B,aAAa/B,gBAAgB2B,KAAhB,CAAzC;AAC5B9E,aAAOqE,IAAP,CAAY,EAAEW,gBAAF,EAAZ;AACD,KAVoB,CAArB;;AAYAJ,SAAKzD,KAAL,CAAW0D,OAAX,CAAmB,gBAAQ;AACzB,UAAMM,QAAQ3E,KAAK4C,QAAL,CAAcO,KAAd,CAAoB,GAApB,CAAd;AACA,UAAMyB,aAAaD,MAAME,MAAN,CAAa,CAAb,EAAgBF,MAAMlF,MAAN,GAAe,CAA/B,EAAkC8B,IAAlC,CAAuC,GAAvC,CAAnB;AACA/B,aAAOqE,IAAP,CACE;AACEiB,iBAAS;AACPC,gBAAM/E,KAAKgB,cADJ;AAEP4D,gCAFO;AAGPI,wBAAc,KAHP;AAIPC,cAAIL;AAJG;AADX,OADF,EASE;AACEJ,iBAAS;AACPxE,gBAAM,MAAM4E,UADL;AAEPH,sCAA4B;AAFrB;AADX,OATF;AAgBD,KAnBD;;AAqBA;AACAL,SAAKtD,YAAL,IAAqBsD,KAAKtD,YAAL,CAAkBoE,KAAlB,CAAwB,CAAxB,EAA2BC,OAA3B,GAAqCd,OAArC,CAA6C,UAACe,SAAD,EAAY1B,KAAZ,EAAmBY,KAAnB,EAA6B;AAC7F,UAAMpB,UAAU,MAAMkC,SAAtB;AACA,UAAMC,YAAYf,MAAMZ,QAAQ,CAAd,CAAlB;AACA;AACA;AACA;AACA,UAAM4B,kBAAkBF,UAAU7B,QAAV,CAAmB,GAAnB,KAA2BZ,gBAAgByC,SAAhB,CAAnD;AACA,UAAMG,yCAAwBD,mBAAmBF,SAA3C,EAAuD,EAAEI,OAAOtC,OAAT,EAAvD,CAAN;;AAEA,UAAMuC,yBACD1C,mBADC,EAEDwC,kBAFC,CAAN;;AAKA,UAAIjB,MAAM7E,MAAN,KAAiB,CAArB,EAAwB;AACtBgG,kBAAUC,GAAV,GAAgB,MAAhB;AACD,OAFD,MAEO,IAAIhC,QAAQY,MAAM7E,MAAN,GAAe,CAA3B,EAA8B;AACnCgG,kBAAUC,GAAV;AACEA,eAAK;AADP,WAGGJ,mBAAmBF,SAHtB,EAGkC,MAAMC,SAAN,GAAkB,MAHpD;AAKA;AACAI,kBAAUE,OAAV,GAAoB,EAAEvC,QAAQ,UAAV,EAApB;AACD,OARM,MAQA;AACLqC,kBAAUC,GAAV,GAAgB,UAAhB;AACD;;AAEDlG,aAAOqE,IAAP,CAAY,EAAE+B,QAAQH,SAAV,EAAZ;;AAEA,UAAI/B,QAAQY,MAAM7E,MAAN,GAAe,CAA3B,EAA8B;AAC5B,YAAMoG,yBAAyB,aAAalD,gBAAgB0C,SAAhB,CAA5C;AACA7F,eAAOqE,IAAP,CAAY,EAAEiC,2BAAUD,sBAAV,EAAmC,CAAnC,CAAF,EAAZ;AACD;;AAED,UAAIP,eAAJ,EAAqB;AACnB9F,eAAOqE,IAAP,CACE;AACEkC,0CAAeX,SAAf,EAA2B,MAAME,eAAjC;AADF,SADF,EAIE;AACEU,wCAAaV,eAAb,EAA+B,CAA/B;AADF,SAJF;AAQD;AACF,KA7CoB,CAArB;;AA+CA,WAAO9F,MAAP;AACD,GApFgB,EAoFd,EApFc,CAAjB;;AAsFA,SAAO2E,QAAP;AACD,CA1GD;;AA4GA,IAAM8B,kBAAkB,SAAlBA,eAAkB,CAAChD,MAAD,EAASiD,YAAT,EAA0B;AAChD,MAAI,CAACjD,MAAD,IAAW,CAACiD,YAAhB,EAA8B;AAC9B,MAAMC,eAAe,EAArB;AACAlD,YAAUkD,aAAatC,IAAb,CAAkBZ,MAAlB,CAAV;AACAiD,kBAAgBC,aAAatC,IAAb,CAAkBqC,YAAlB,CAAhB;AACA,SAAOC,aAAa1G,MAAb,KAAwB,CAAxB,GAA4B0G,aAAa,CAAb,CAA5B,GAA8C,EAAEC,MAAMD,YAAR,EAArD;AACD,CAND;;AAQA,IAAME,sBAAsB,SAAtBA,mBAAsB,CAACpC,CAAD,EAAIC,CAAJ,EAAU;AACpC,MAAID,EAAErD,KAAF,GAAUsD,EAAEtD,KAAhB,EAAuB,OAAO,CAAP,CAAvB,KACK,IAAIqD,EAAErD,KAAF,GAAUsD,EAAEtD,KAAhB,EAAuB,OAAO,CAAC,CAAR,CAAvB,KACA,OAAOqD,EAAErB,QAAF,CAAW0D,aAAX,CAAyBpC,EAAEtB,QAA3B,CAAP;AACN,CAJD;;AAMO,SAASvD,SAAT,GAAiC;AAAA,MAAdD,OAAc,uEAAJ,EAAI;AAAA,MAE9BmH,IAF8B,GAEoBnH,OAFpB,CAE9BmH,IAF8B;AAAA,MAExBhH,KAFwB,GAEoBH,OAFpB,CAExBG,KAFwB;AAAA,MAEjBO,UAFiB,GAEoBV,OAFpB,CAEjBU,UAFiB;AAAA,MAELmD,MAFK,GAEoB7D,OAFpB,CAEL6D,MAFK;AAAA,MAEGe,IAFH,GAEoB5E,OAFpB,CAEG4E,IAFH;AAAA,MAESwC,MAFT,GAEoBpH,OAFpB,CAESoH,MAFT;;AAGtC,MAAI3F,iBAAJ;AACA,MAAIzB,QAAQyB,QAAR,IAAoBzB,QAAQyB,QAAR,KAAqB,CAA7C,EAAgDA,WAAWzB,QAAQyB,QAAnB,CAAhD,KACK,IAAI,KAAKN,MAAL,CAAYnB,OAAZ,CAAoByB,QAApB,IAAgC,KAAKN,MAAL,CAAYnB,OAAZ,CAAoByB,QAApB,KAAiC,CAArE,EAAwEA,WAAW,KAAKN,MAAL,CAAYnB,OAAZ,CAAoByB,QAA/B,CAAxE,KACAA,WAAW,CAAX;;AAEL,MAAMmC,YAAY1C,sBAAsBhB,IAAtB,CAA2B,IAA3B,EAAiC,KAAKiB,MAAtC,EAA8C,UAACW,WAAD,EAAc0B,QAAd,EAAwBrC,MAAxB,EAAgCnB,OAAhC,EAAyCsB,OAAzC,EAAqD;AACnH,QAAI+F,aAAJ;AACA,QAAIlG,OAAOmB,QAAP,KAAoB,OAAxB,EAAiC+E,OAAO,OAAP,CAAjC,KACK,IAAIlG,OAAOA,MAAX,EAAmBkG,OAAO,QAAP,CAAnB,KACA,IAAIrH,QAAQyC,GAAZ,EAAiB4E,OAAO,KAAP,CAAjB,KACAA,OAAO,MAAP;AACL,QAAMC,qBAAY9D,kBAAZ,EAAsB6D,UAAtB,IAA+B/F,OAA/B,CAAN;AACA,wCAAWQ,WAAX,IAAwBwF,OAAxB;AACD,GARiB,EAQf,EARe,EAQX,EAAE7F,kBAAF,EAAYf,sBAAZ,EARW,EAQekE,IARf,CAQoBqC,mBARpB,CAAlB;;AAUA,MAAMlC,WAAW,EAAjB;;AAEA,MAAM+B,eAAe/D,oBAAoB,KAAK5B,MAAzB,EAAiCiG,MAAjC,CAArB;AACA,MAAML,eAAeF,gBAAgBhD,MAAhB,EAAwBiD,YAAxB,CAArB;;AAEA,MAAMS,uBAAuBtD,wBAAwBL,SAAxB,EAAmClD,UAAnC,EAA+Ce,QAA/C,CAA7B;AACA8F,0BAAwBxC,SAASN,IAAT,oCAAiB8C,oBAAjB,EAAxB;;AAEAR,kBAAgBhC,SAASN,IAAT,CAAc,EAAE+C,QAAQT,YAAV,EAAd,CAAhB;AACArG,gBAAcqE,SAASN,IAAT,CAAc,EAAEmC,UAAUlG,UAAZ,EAAd,CAAd;AACAkE,UAAQG,SAASN,IAAT,CAAc,EAAEiC,OAAO9B,IAAT,EAAd,CAAR;AACAuC,UAAQpC,SAASN,IAAT,CAAc,EAAEgD,OAAON,IAAT,EAAd,CAAR;AACAhH,WAAS4E,SAASN,IAAT,CAAc,EAAEiD,QAAQvH,KAAV,EAAd,CAAT;;AAEA,SAAO4E,SAAS1E,MAAT,KAAoB,CAApB,GAAwB,KAAKsH,IAAL,EAAxB,GAAsC,KAAKC,SAAL,CAAe7C,QAAf,EAAyB8C,YAAzB,CAAsC,IAAtC,EAA4CC,IAA5C,EAA7C;AAED;;AAOD,IAAMC,kBAAkB,SAAlBA,eAAkB,SAAU;AAChC5G,SAAO6G,MAAP,CAAc,WAAd,EAA2B/H,SAA3B;AACAkB,SAAO6G,MAAP,CAAc,cAAd,EAA8B1H,YAA9B;AACD,CAHD;;kBAKeyH,e","file":"graphFind.js","sourcesContent":["const checkIsExclusive = projection => {\r\n  const keys = Object.keys(projection);\r\n  return projection[keys[0]] === 0;\r\n};\r\n\r\nconst shouldIncludePath = (path, projection) => {\r\n  if (!projection) return true;\r\n  const keys = Object.keys(projection);\r\n  const isExclusive = checkIsExclusive(projection);\r\n  const pathInProjection = keys.some(key => isExclusive ? key === path : ( key.startsWith(path) || path.startsWith(key) ) );\r\n  return ( isExclusive && !pathInProjection ) || ( !isExclusive && pathInProjection ) ? true : false;\r\n};\r\n\r\nfunction reduceSchemaRecursive(schema, reducer, initialValue, context = {}) {\r\n  const { paths = [], level = 0, maxDepth, projection, parentArrays, parentRef, collectionName } = context;\r\n  return Object.keys(schema.paths).reduce((accumulator, path) => {\r\n    const currentSchemaPath = schema.paths[path];\r\n    const options = ( currentSchemaPath.caster && currentSchemaPath.caster.options ) || currentSchemaPath.options;\r\n    const currentPaths = [...paths, path];\r\n    const currentPathsString = currentPaths.join('.');\r\n    const nextDepth = maxDepth === true ? maxDepth : maxDepth - 1;\r\n    const nextParentArrays = currentSchemaPath.instance === 'Array' ? [...(parentArrays || []), currentPathsString] : parentArrays;\r\n    const includePath = shouldIncludePath(currentPathsString, projection);\r\n\r\n    let currentAccValue = (includePath && reducer(\r\n        accumulator,\r\n        currentPathsString,\r\n        currentSchemaPath,\r\n        options,\r\n        { level, parentArrays, parentRef, collectionName })\r\n      ) || accumulator;\r\n    if (options.ref && ( nextDepth === true || nextDepth >= 0 ) && includePath) {\r\n      const targetModel = this.db.model(options.ref);\r\n      const targetCollectionName = targetModel.collection.collectionName;\r\n      currentAccValue = reduceSchemaRecursive.call(\r\n        this,\r\n        targetModel.schema,\r\n        reducer,\r\n        currentAccValue,\r\n        {\r\n          paths: currentPaths,\r\n          level: level + 1,\r\n          maxDepth: nextDepth,\r\n          projection,\r\n          parentArrays: nextParentArrays,\r\n          parentRef: currentPathsString,\r\n          collectionName: targetCollectionName\r\n        }\r\n      );\r\n    } else if (currentSchemaPath.schema && includePath) {\r\n      currentAccValue = reduceSchemaRecursive.call(\r\n        this,\r\n        currentSchemaPath.schema,\r\n        reducer,\r\n        currentAccValue,\r\n        {\r\n          paths: currentPaths,\r\n          level,\r\n          maxDepth,\r\n          projection,\r\n          parentArrays: nextParentArrays\r\n        }\r\n      );\r\n    } \r\n    return currentAccValue;\r\n  }, initialValue);\r\n}\r\n\r\nconst searchQueryToFilter = (schema, searchQuery) => {\r\n  const { searchFields } = schema.options;\r\n  if (!searchQuery || !searchFields) return;\r\n  const filters = searchFields.map(searchField => {\r\n    return { [searchField]: new RegExp(`.*${searchQuery}.*`, 'i') };\r\n  });\r\n  return { $or: filters};\r\n};\r\n\r\nconst dotToUnderscore = property => property.replace(/\\.+/g, '_');\r\n\r\nconst getRootGroupProperties = pathsMeta => {\r\n  let rootGroupProperties = pathsMeta.filter(path => {\r\n    return path.level === 0 && path.property !== '_id';\r\n  });\r\n  rootGroupProperties = rootGroupProperties.reduce((accumulator, path) => {\r\n    // In case of nested objects, always pick the root property.\r\n    const curPath = path.property.split('.')[0];\r\n    return accumulator[curPath] ?\r\n        accumulator :\r\n        { ...accumulator, [curPath]: { $first: '$' + curPath } };\r\n  }, {});\r\n  return rootGroupProperties;\r\n};\r\n\r\nconst getJoinAndGroupPipeline = pathsMeta => {\r\n  const pathsToJoin = pathsMeta.filter(path => path.property.includes('_id') && ( path.parentRef !== undefined ));\r\n  if (!pathsToJoin.length) return [];\r\n\r\n  const rootGroupProperties = getRootGroupProperties(pathsMeta);\r\n\r\n  // Grouping by parent arrays property, so references same level deep\r\n  // should be processed by the same step\r\n  const groupedPaths = pathsToJoin.reduce((accumulator, path, index) => {\r\n    const key = ( path.parentArrays && path.parentArrays.join('_') ) || 'root';\r\n    const entry = ( accumulator[key] && Object.assign({}, accumulator[key]) ) || { parentArrays: path.parentArrays, paths: [], index };\r\n    entry.paths.push(path);\r\n    return { ...accumulator, [key]: entry };\r\n  }, {});\r\n  const groupedByParentArrays = Object.keys(groupedPaths).reduce((accumulator, key) => {\r\n    const value = groupedPaths[key];\r\n    return [...accumulator, value];\r\n  }, []).sort((a, b) => a.index > b.index ? 1 : a.index < b.index ? - 1 : 0 );\r\n\r\n  const pipeline = groupedByParentArrays.reduce((accumulator, item) => {\r\n    const result = [...accumulator];\r\n    item.parentArrays && item.parentArrays.forEach((array, index, sourceArray) => {\r\n      const curPath = '$' + array;\r\n      const $unwind = {\r\n          path: curPath,\r\n          preserveNullAndEmptyArrays: true\r\n      };\r\n      // Since grouping does not guarantee order, we have to maintain\r\n      // array indexes to restore order right after grouping\r\n      if (sourceArray.length > 1) $unwind.includeArrayIndex = 'indexes.' + dotToUnderscore(array);\r\n      result.push({ $unwind });\r\n    });\r\n\r\n    item.paths.forEach(path => {\r\n      const parts = path.property.split('.');\r\n      const localField = parts.splice(0, parts.length - 1).join('.');\r\n      result.push(\r\n        {\r\n          $lookup: {\r\n            from: path.collectionName,\r\n            localField,\r\n            foreignField: '_id',\r\n            as: localField\r\n          }\r\n        },\r\n        {\r\n          $unwind: {\r\n            path: '$' + localField,\r\n            preserveNullAndEmptyArrays: true\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n    // Executing revere here to make sure deep nested references go first\r\n    item.parentArrays && item.parentArrays.slice(0).reverse().forEach((arrayItem, index, array) => {\r\n      const curPath = '$' + arrayItem;\r\n      const nextArray = array[index + 1];\r\n      // Since grouping does not support dot-notatation in properties,\r\n      // making some workaround here by replacing dot's with underscores and adding another\r\n      // pipeline steps to fix the issue.\r\n      const underscoredPath = arrayItem.includes('.') && dotToUnderscore(arrayItem);\r\n      const arrayGroupProperty = { [underscoredPath || arrayItem]: { $push: curPath } };\r\n\r\n      const groupStep = {\r\n        ...rootGroupProperties,\r\n        ...arrayGroupProperty\r\n      };\r\n\r\n      if (array.length === 1) {\r\n        groupStep._id = '$_id';\r\n      } else if (index < array.length - 1) {\r\n        groupStep._id = {\r\n          _id: '$_id',\r\n          // TODO: make some checks to prevent grouping array rows without ids\r\n          [underscoredPath || arrayItem]: '$' + nextArray + '._id'\r\n        };\r\n        // Indexes property will not be preserved on the last step\r\n        groupStep.indexes = { $first: '$indexes' };\r\n      } else {\r\n        groupStep._id = '$_id._id';\r\n      }\r\n\r\n      result.push({ $group: groupStep });\r\n\r\n      if (index < array.length - 1) {\r\n        const nextArrayIndexProperty = 'indexes.' + dotToUnderscore(nextArray);\r\n        result.push({ $sort: { [nextArrayIndexProperty]: 1 } });\r\n      }\r\n\r\n      if (underscoredPath) {\r\n        result.push(\r\n          {\r\n            $addFields: { [arrayItem]: '$' + underscoredPath }\r\n          },\r\n          {\r\n            $project: { [underscoredPath]: 0 }\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }, []);\r\n\r\n  return pipeline;\r\n};\r\n\r\nconst getResultFilter = (filter, searchFilter) => {\r\n  if (!filter && !searchFilter) return;\r\n  const resultFilter = [];\r\n  filter && resultFilter.push(filter);\r\n  searchFilter && resultFilter.push(searchFilter);\r\n  return resultFilter.length === 1 ? resultFilter[0] : { $and: resultFilter };\r\n};\r\n\r\nconst treePathsComparator = (a, b) => {\r\n  if (a.level > b.level) return 1;\r\n  else if (a.level < b.level) return -1;\r\n  else return a.property.localeCompare(b.property);\r\n};\r\n\r\nexport function graphFind(options = {}) {\r\n\r\n  const { skip, limit, projection, filter, sort, search } = options;\r\n  let maxDepth;\r\n  if (options.maxDepth || options.maxDepth === 0) maxDepth = options.maxDepth;\r\n  else if (this.schema.options.maxDepth || this.schema.options.maxDepth === 0) maxDepth = this.schema.options.maxDepth;\r\n  else maxDepth = 1;\r\n\r\n  const pathsMeta = reduceSchemaRecursive.call(this, this.schema, (accumulator, property, schema, options, context) => {\r\n    let type;\r\n    if (schema.instance === 'Array') type = 'array';\r\n    else if (schema.schema) type = 'schema';\r\n    else if (options.ref) type = 'ref';\r\n    else type = 'path';\r\n    const newPath = { property, type, ...context };\r\n    return [...accumulator, newPath];\r\n  }, [], { maxDepth, projection }).sort(treePathsComparator);\r\n\r\n  const pipeline = [];\r\n\r\n  const searchFilter = searchQueryToFilter(this.schema, search);\r\n  const resultFilter = getResultFilter(filter, searchFilter);\r\n\r\n  const joinAndGroupPipeline = getJoinAndGroupPipeline(pathsMeta, projection, maxDepth);\r\n  joinAndGroupPipeline && pipeline.push(...joinAndGroupPipeline);\r\n\r\n  resultFilter && pipeline.push({ $match: resultFilter });\r\n  projection && pipeline.push({ $project: projection });\r\n  sort && pipeline.push({ $sort: sort });\r\n  skip && pipeline.push({ $skip: skip });\r\n  limit && pipeline.push({ $limit: limit });\r\n\r\n  return pipeline.length === 0 ? this.find() : this.aggregate(pipeline).allowDiskUse(true).exec();\r\n\r\n}\r\n\r\nasync function graphFindOne(options) {\r\n  const result = await graphFind.call(this, { ...options, limit: 1 });\r\n  return result.length > 0 ? result[0] : null;\r\n}\r\n\r\nconst graphFindPlugin = schema => {\r\n  schema.static('graphFind', graphFind);\r\n  schema.static('graphFindOne', graphFindOne);\r\n};\r\n\r\nexport default graphFindPlugin;"]}