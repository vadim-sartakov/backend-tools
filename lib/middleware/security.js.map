{"version":3,"sources":["../../src/middleware/security.js"],"names":["readFilter","req","res","next","updateFilter","validator"],"mappings":";;;;;AAAA;;;;;AAKO,IAAMA,kCAAa,SAAbA,UAAa;AAAA,SAAkB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5DA;AACH,GAFyB;AAAA,CAAnB;;AAIP;;;;;AAKO,IAAMC,sCAAe,SAAfA,YAAe;AAAA,SAAkB,UAACH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9DA;AACH,GAF2B;AAAA,CAArB;;AAIP;;;;;AAKO,IAAME,gCAAY,SAAZA,SAAY;AAAA,SAAoB,UAACJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7DA;AACH,GAFwB;AAAA,CAAlB","file":"security.js","sourcesContent":["/**\r\n * Checks current user sotred in \"user.local\" against security schema.\r\n * Resulted filter stored in \"res.locals.readFilter\" parameter\r\n * @param {Object} securitySchema\r\n */\r\nexport const readFilter = securitySchema => (req, res, next) => {\r\n    next();\r\n};\r\n\r\n/**\r\n * Checks current user sotred in \"user.local\" against security schema.\r\n * Updates request body according schema then stores result in \"res.locals.filteredBody\"\r\n * @param {*} securitySchema \r\n */\r\nexport const updateFilter = securitySchema => (req, res, next) => {\r\n    next();\r\n};\r\n\r\n/**\r\n * Validates body against validation schema.\r\n * ValidationError is thrown in case of validation fails.\r\n * @param {*} validationSchema \r\n */\r\nexport const validator = validationSchema => (req, res, next) => {\r\n    next();\r\n};"]}