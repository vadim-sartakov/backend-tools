{"version":3,"sources":["../../src/utils/http.js"],"names":["getCurrentUrl","req","protocol","get","baseUrl","asyncMiddleware","fn","errHandler","res","next","Promise","resolve","catch","err"],"mappings":";;;;;AAAO,IAAMA,wCAAgB,SAAhBA,aAAgB;AAAA,SAAUC,IAAIC,QAAd,WAA4BD,IAAIE,GAAJ,CAAQ,MAAR,CAA5B,GAA8CF,IAAIG,OAAlD;AAAA,CAAtB;AACA,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACC,EAAD,EAAKC,UAAL;AAAA,SAAoB,UAACN,GAAD,EAAMO,GAAN,EAAWC,IAAX;AAAA,WAAoBC,QAAQC,OAAR,CAAgBL,GAAGL,GAAH,EAAQO,GAAR,EAAaC,IAAb,CAAhB,EAAoCG,KAApC,CAA2CL,cAAe;AAAA,aAAOA,WAAWM,GAAX,EAAgBZ,GAAhB,EAAqBO,GAArB,EAA0BC,IAA1B,CAAP;AAAA,KAAhB,IAA4DA,IAAtG,CAApB;AAAA,GAApB;AAAA,CAAxB","file":"http.js","sourcesContent":["export const getCurrentUrl = req => `${req.protocol}://${req.get('host')}${req.baseUrl}`;\r\nexport const asyncMiddleware = (fn, errHandler) => (req, res, next) => Promise.resolve(fn(req, res, next)).catch((errHandler && (err => errHandler(err, req, res, next))) || next);"]}